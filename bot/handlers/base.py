from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from loguru import logger
from keyboards import inline_get_access_keyboard
from config import settings


router = Router()

AUTHORIZED_USERS = set()  # Store authenticated user IDs


class AuthStates(StatesGroup):
    waiting_for_password = State()


START_MESSAGE = (
    '‚úã –ü—Ä–∏–≤–µ—Ç, —è {bot_full_name}! –Ø —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ.\n\
‚è≥ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–≤—ã–º –º–æ–¥–µ–ª—è–º (LLM):\n\
    - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏–¥–µ–π, –∫–æ–¥–∞ etc.;\n\
    - –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç;\n\
    - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.\n\n\
–¢—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∑–¥–µ—Å—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É.\n\n\
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∫–∞–∑–∞–≤ –≤ –ø–æ–¥–ø–∏—Å–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n\
–ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏—Ö –≤ —Ç–µ–∫—Å—Ç.\n\n\
–ß—Ç–æ–±—ã —è –æ—Ç–≤–µ—Ç–∏–ª –≤ –≥—Ä—É–ø–ø–µ, –Ω–∞—á–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–æ –º–Ω–µ @{bot_username} –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n\
–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü" –∏ –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å.'
)


@router.message(CommandStart())
async def cmd_start(message: Message):
    logger.info(f"User {message.from_user.id} started bot")
    await message.answer(
        START_MESSAGE.format(
            bot_full_name=message.bot._me.full_name,
            bot_username=message.bot._me.username,
        ),
        reply_markup=inline_get_access_keyboard,
    )


@router.callback_query(F.data == "get_access")
async def request_password(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    # await callback.answer()  # Acknowledge the callback query
    await state.set_state(AuthStates.waiting_for_password)


@router.message(AuthStates.waiting_for_password)
async def check_password(message: Message, state: FSMContext):
    if message.text == settings.ACCESS_PASSWORD:
        AUTHORIZED_USERS.add(message.from_user.id)
        await message.reply(
            "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø—ã."
        )
        await state.clear()  # Reset FSM state after successful authentication
    else:
        await message.reply(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü" –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑.',
            reply_markup=inline_get_access_keyboard,
        )
        await state.clear()  # Reset state in case of incorrect password
